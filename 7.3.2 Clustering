# This mini-project is based on the K-Means exercise from 'R in Action'
# Go here for the original blog post and solutions
# http://www.r-bloggers.com/k-means-clustering-from-r-in-action/

# Exercise 0: Install these packages if you don't have them already

install.packages(c("cluster", "rattle.data","NbClust"))

# Now load the data and look at the first few rows
data(wine, package="rattle.data")
head(wine)

# Exercise 1: Remove the first column from the data and scale
# it using the scale() function


wine1 <- wine %>% 
  select(Alcohol:Proline)

wine1 <- scale(wine1)


# Now we'd like to cluster the data using K-Means. 
# How do we decide how many clusters to use if you don't know that already?
# We'll try two methods.

# Method 1: A plot of the total within-groups sums of squares against the 
# number of clusters in a K-means solution can be helpful. A bend in the 
# graph can suggest the appropriate number of clusters. 

wssplot <- function(data, nc=15, seed=1234){
	              wss <- (nrow(data)-1)*sum(apply(data,2,var))
               	      for (i in 2:nc){
		        set.seed(seed)
	                wss[i] <- sum(kmeans(data, centers=i)$withinss)}
	                
		      plot(1:nc, wss, type="b", xlab="Number of Clusters",
	                        ylab="Within groups sum of squares")
	   }

wssplot(wine1)

# Exercise 2:
#   * How many clusters does this method suggest?

# The most dramatic change in bend is at 3 Clusters. This indicates that 3 or 4 are probably the appropriate 
# of clusters 

#   * Why does this method work? What's the intuition behind it?

#  The SSE ( Sum of Squared Errors) is the sum of the squared distance between each data point 
# in a cluster and its centroid. Higher SSE means means lower accuracy, lower SSE means a higher
# accuracy. You can just add more clusters because it will have a lower and lower SSE but 
# there is a chance if you do this will cause over-fitting. THe point where the slopes changes is 
# usually a good amount of clusters. 

#   * Look at the code for wssplot() and figure out how it works

#  nc is the max number of potential clusters,  seed is the random number generator
#  Then it calculates the number of rows in the data set then subtracts 1. It then multiplies this 
# by  the sum of variance per column. Then calculates the SSE
#  The plot shows numbers of clusters from 1-15 and instructs how to label 
#  the x and y axis'


# Method 2: Use the NbClust library, which runs many experiments
# and gives a distribution of potential number of clusters.

library(NbClust)
set.seed(1234)
nc <- NbClust(wine1, min.nc=2, max.nc=15, method="kmeans")
barplot(table(nc$Best.n[1,]),
	          xlab="Numer of Clusters", ylab="Number of Criteria",
		            main="Number of Clusters Chosen by 26 Criteria")


# Exercise 3: How many clusters does this method suggest?
  # This method pretty clearly states 3 is the correct amount of clusters.

# Exercise 4: Once you've picked the number of clusters, run k-means 
# using this number of clusters. Output the result of calling kmeans()
# into a variable fit.km

k = 3
 fit.km <- kmeans(wine1, centers = k)
str(fit.km)
 

# Now we want to evaluate how well this clustering does.

# Exercise 5: using the table() function, show how the clusters in fit.km$clusters
# compares to the actual wine types in wine$Type. Would you consider this a good
# clustering?


wine.fit <- table(fit.km$cluster, wine$Type)
wine.fit

# Exercise 6:
# * Visualize these clusters using  function clusplot() from the cluster library
# * Would you consider this a good clustering?

library(cluster)
clusplot(wine.fit, clus = wine.fit[3, ])
?clusplot


# It doesn't seem like this is a great to cluster. When it is type 1 it seems to be correct I don't 
# think its correct for Type 2 or 3 